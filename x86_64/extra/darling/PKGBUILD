pkgname=darling
# Versioning will be done by commit date
pkgver=2022.04.26
pkgrel=1
arch=(x86_64)
commitid=fa5348c8a9b338746b91a53a801343a8d046a66d
source=(dkms.conf)
install=darling.install
depends=(
	cmake clang flex bison icu gcc 
	fontconfig cairo libtiff python2 mesa llvm libbsd libxkbfile 
	libxcursor libxext libxkbcommon libxrandr ffmpeg
	xz fuse2 libxml2 icu openssl bzip2 zlib systemd
	wget curl ruby3 sed libarchive file python3 gawk libunwind

	# lib32
	lib32-clang lib32-bzip2 lib32-systemd lib32-libxslt libpng cairo libtiff glu libbsd python2)
makedepends=(
	git pkgconf
)

prepare() {
	# Delete old darling if present somehow
	rm -rf darling

	# Clone darling separately so modules and etc can be worked easily
	git clone --recursive https://github.com/darlinghq/darling.git

	cd darling

	# Checkout specific commit ( chosen to be built )
	git checkout $commitid

	# make build dir
	mkdir -p build

	# update and init submodules
	git submodule init

	git submodule update
}

build() {
	cd darling/build

	echo "Running cmake."
	cmake \
	-D CMAKE_INSTALL_PREFIX=/usr \
	-D CMAKE_BUILD_TYPE=Release \
	..

	echo "Running make."
	make 

	echo "Run 'make lkm'..."
	make lkm
}

package() {
	cd darling/build

	# Destdir install darling
	make DESTDIR="$pkgdir" install 

	# Destdir install lkm / dkms
	dest_src="$pkgdir/usr/src/darling-mach-$pkgver"
	real_src=/usr/src/darling-mach-$pkgver

	install -dm755 $(dirname "$dest_src")
	cp -r "$srcdir/darling/src/external/lkm"
	cp -r "$srcdir/darling/build/src/external/lkm" "$dest_src/migdir"
  
	# Copy missing header rtsig.h
	cp "$srcdir/darling/build/src/startup/rtsig.h" "$dest_src/include"

	echo "Set configuration for DKMS..."
	install -Dm644 "$srcdir/dkms.conf"      "$dest_src"
	sed -i "s|@PKGVER@|$pkgver|g"           "$dest_src/dkms.conf"
	sed -i "s|@SRCDEST@|$real_src|g"        "$dest_src/dkms.conf"
}
